@using Umbraco.Web
@inherits Umbraco.Web.Mvc.UmbracoViewPage<dynamic>
@using Umbraco.Web.Templates
@{
    string jsonData = Model.value;
    if (string.IsNullOrEmpty(jsonData))
    {
        return;
    }
    var data = Json.Decode(jsonData);
    
    if (!string.IsNullOrEmpty(data.previewKsp1Icon))
    {
        data.ksp1Icon = data.previewKsp1Icon;
    }
    if (!string.IsNullOrEmpty(data.previewKsp2Icon))
    {
        data.ksp2Icon = data.previewKsp2Icon;
    }
    if (!string.IsNullOrEmpty(data.previewKsp3Icon))
    {
        data.ksp3Icon = data.previewKsp3Icon;
    }
    if (!string.IsNullOrEmpty(data.previewKsp4Icon))
    {
        data.ksp4Icon = data.previewKsp4Icon;
    }

    int numGroups = 0;
    if (validateGroup((string)data.ksp1Label, (string)data.ksp1Text, (string)data.ksp1Icon))
    {
        numGroups++;
    }
    if (validateGroup((string)data.ksp2Label, (string)data.ksp2Text, (string)data.ksp2Icon))
    {
        numGroups++;
    }
    if (validateGroup((string)data.ksp3Label, (string)data.ksp3Text, (string)data.ksp3Icon))
    {
        numGroups++;
    }
    if (validateGroup((string)data.ksp4Label, (string)data.ksp4Text, (string)data.ksp4Icon))
    {
        numGroups++;
    }
    string css = data.css;
    string cssClass = null;
    switch (numGroups)
    {
        case 0:
            return;
        case 1:
            cssClass = "col-lg-12";
            break;
        case 2:
            cssClass = "col-lg-6";
            break;
        case 3:
            cssClass = "col-lg-4";
            break;
        case 4:
            cssClass = "col-lg-3";
            break;
    }

}
<div class="ksp @css">
    <div class="content-wrapper">
        <div class="row">
            @generateBox((string)data.ksp1Label, (string)data.ksp1Text, (string)data.ksp1Icon, cssClass)
            @generateBox((string)data.ksp2Label, (string)data.ksp2Text, (string)data.ksp2Icon, cssClass)
            @generateBox((string)data.ksp3Label, (string)data.ksp3Text, (string)data.ksp3Icon, cssClass)
            @generateBox((string)data.ksp4Label, (string)data.ksp4Text, (string)data.ksp4Icon, cssClass)
        </div>
    </div>
</div>
<link rel="Stylesheet" href="/App_Plugins/infront.KeySellingPoints/css/style.css" />
@functions {
    public static bool validateGroup(string label, string text, string icon)
    {
        if (string.IsNullOrEmpty(label) || string.IsNullOrEmpty(text) || string.IsNullOrEmpty(icon))
        {
            return false;
        }
        return true;
    }
}
@helper generateBox(string label, string text, string icon, string cssClass)
{
    if (!validateGroup(label, text, icon))
    {
        return;
    }
    <div class="@cssClass">
        <div class="stack-box">
            <div class="stack-box__image scroll-animated scroll-zoomed in-view" style="background-image: url('@(icon)'); background-size:contain;"></div>
            <div class="stack-box__label">
                @label
            </div>
            <div class="stack-box__text">
                @text
            </div>
        </div>
    </div>
}